@model IEnumerable<Service_Library.Models.Book>

<!-- Page Header -->
<h1 class="mb-4">My Library</h1>
<!-- Filter Button -->
<div class="dropdown position-absolute top-10 end-0 me-3 mt-3">
    <button class="btn btn-outline-secondary dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
        Categories
    </button>
    <ul class="dropdown-menu dropdown-menu-end wide-dropdown" aria-labelledby="filterDropdown" style="max-height: 200px; overflow-y: auto;">
        <li>
            <label class="dropdown-item">
                <input type="radio" name="categoryFilter" value="" @(string.IsNullOrEmpty(ViewContext.HttpContext.Request.Query["categoryFilter"]) ? "checked" : "") onchange="filterByCategory('')"> All Categories
            </label>
        </li>
        @foreach (var category in ViewBag.Categories as IEnumerable<string>)
        {
            <li>
                <label class="dropdown-item">
                    <input type="radio" name="categoryFilter" value="@category" @(ViewContext.HttpContext.Request.Query["categoryFilter"] == category ? "checked" : "") onchange="filterByCategory('@Uri.EscapeDataString(category)')">
                    @category
                </label>
            </li>
        }
    </ul>
</div>
<!-- Library Book Container -->
<div class="book-container">
    @foreach (var book in Model)
    {
        <script>
            // Function to attach hover effects to all book cards
            function attachHoverEffects() {
                const cards = document.querySelectorAll('.book-card');

                cards.forEach((card) => {
                    const category = card.getAttribute('data-category'); // Get category
                    const categoryEffects = {
                        "Science Fiction": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-01/spirit-flame/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-01/spirit-flame/idle.png"
                        },
                        "Technology": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-1-19/cyberpunk-nightrunner/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-1-18/cyberpunk-nightrunner/idle.png"
                        },
                        "History": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-05-10/forgotten-treasure/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-05-09/forgotten-treasure/idle.png"
                        },
                        "Fantasy": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/splash/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/splash/loop.png"
                        },
                        "Cooking": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/sushi-mania/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/sushi-mania/idle.png"
                        },
                        "Psychology": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-04/all-nighter/idle-frame.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-04/all-nighter/idle-lights.png"
                        },
                        "Art": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/sunrise-grove/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/twilight-grove/idle.png"
                        },
                        "Children's Books": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-15/doodlebob-takeover/intro_479359c2.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-15/doodlebob-takeover/idle.png"
                        },
                        "Mystery": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-25/spirit-of-the-kitsune/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-25/spirit-of-the-kitsune/idle.png"
                        },
                        "Romance": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/magic-girl/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/magic-girl/loop.png"
                        },
                        "Science": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-14/arcane-epiphany/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-14/arcane-epiphany/idle.png"
                        },
                        "Adventure": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2023-10-11/vines/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2023-10-11/vines/loop.png"
                        },
                        "Horror": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-09-23/bubblegum-zombie-slime/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-09-23/bubblegum-zombie-slime/idle.png"
                        },
                        "Default": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-08-08/sakura-katana/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-08-08/sakura-katana/idle.png"
                        }
                    };

                    const effects = categoryEffects[category] || categoryEffects["Default"];
                    let introTimeout;

                    // Remove any existing event listeners to avoid duplication
                    card.onmouseenter = null;
                    card.onmouseleave = null;

                    // Add hover event listeners
                    card.addEventListener('mouseenter', () => {
                        clearTimeout(introTimeout); // Clear previous timeout

                        const introGif = `${effects.intro}?${new Date().getTime()}`;
                        const idleGif = effects.idle;

                        card.style.setProperty('--background-image', 'none'); // Reset background

                        setTimeout(() => {
                            card.style.setProperty('--background-image', `url("${introGif}")`);

                            introTimeout = setTimeout(() => {
                                card.style.setProperty('--background-image', `url("${idleGif}")`);
                            }, 4500); // Change to idle after 4.5 seconds
                        }, 50);
                    });

                    card.addEventListener('mouseleave', () => {
                        clearTimeout(introTimeout); // Stop the intro effect
                        card.style.setProperty('--background-image', `url("${effects.idle}")`);
                    });
                });
            }
            // Ensure hover effects are applied on page load
            document.addEventListener('DOMContentLoaded', attachHoverEffects);

            // Reapply hover effects when dynamically updating cards
            function updateCards() {
                attachHoverEffects();
            }
        </script>
        <div class="book-card" data-category="@book.Category" data-bs-toggle="modal" data-bs-target="#bookModal-@book.BookId">
            @if (book.CoverImage != null)
            {
                <img src="data:image/png;base64,@(Convert.ToBase64String(book.CoverImage))"
                     alt="Cover Image" class="book-cover" />
            }

            <!-- Book Info -->
            <div class="book-info">
                <h6 class="book-title">@book.Title</h6>
                <p class="book-publisher">@book.Author</p>
                <p style="font-weight: bold;">
                    @if (!string.IsNullOrEmpty(book.RemainingBorrowTime))
                    {
                        <span style="color: #ffc107;">Borrowed</span>
                    }
                    else
                    {
                        <span style="color: #d21e3c;">Bought</span>
                    }
                </p>



                <!-- Borrow Time Remaining -->
                @if (!string.IsNullOrEmpty(book.RemainingBorrowTime))
                {
                    <p class="text-danger">Borrow Time Remaining: @book.RemainingBorrowTime</p>
                    <button class="btn btn-warning return-button"
                            data-transaction-id="@book.BorrowTransactionId"
                            data-book-id="@book.BookId">
                        Return Book
                    </button>
                }

                <!-- Purchased Info -->
                @if (string.IsNullOrEmpty(book.RemainingBorrowTime))
                {
                    <p class="text-success">Purchased: This book is yours forever!</p>
                }
            </div>
        </div>

        <!-- Modal for Book Details -->
        <div class="modal fade" id="bookModal-@book.BookId" tabindex="-1" aria-labelledby="bookModalLabel-@book.BookId" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="bookModalLabel-@book.BookId">@book.Title</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <!-- Book Details Section -->
                        <div class="book-details">
                            <p><strong>Author:</strong> @book.Author</p>
                            <p><strong>Publisher:</strong> @book.Publisher</p>
                            <p><strong>Format:</strong> @book.Format</p>
                            <p><strong>Category:</strong> @book.Category</p>
                            @if (!string.IsNullOrEmpty(book.RemainingBorrowTime))
                            {
                                <p class="text-danger">Borrow Time Remaining: @book.RemainingBorrowTime</p>
                                <button class="btn btn-warning"
                                        onclick="confirmReturnBook('@book.BorrowTransactionId', '@book.BookId')">
                                    Return Book
                                </button>
                            }
                            else// Only show delete option for purchased books
                            {
                                <button class="btn btn-danger delete-button" data-book-id="@book.BookId">
                                    Delete from Library
                                </button>
                            }
                        </div>
                        <!-- Book Image Section -->
                        @if (book.CoverImage != null)
                        {
                            <div class="book-image-container" id="modalBookContainer-@book.BookId">
                                <img src="data:image/png;base64,@(Convert.ToBase64String(book.CoverImage))"
                                     alt="Book Cover Image" class="img-fluid" />
                                <div class="effect-overlay"></div>
                            </div>
                        }

                        <!-- Script for GIF Effects -->
                        <script>
                            document.addEventListener('DOMContentLoaded', () => {
                                const modal = document.getElementById('bookModal-@book.BookId');
                                const effectOverlay = document.querySelector('#modalBookContainer-@book.BookId .effect-overlay');

                                        const categoryEffects = {
                                "Science Fiction": {
                                    intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-01/spirit-flame/intro.png",
                                    idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-01/spirit-flame/idle.png"
                                },
                                "Technology": {
                                    intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-1-19/cyberpunk-nightrunner/intro.png",
                                    idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-1-18/cyberpunk-nightrunner/idle.png"
                                },
                                "History": {
                                    intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-05-10/forgotten-treasure/intro.png",
                                    idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-05-09/forgotten-treasure/idle.png"
                                },
                                "Fantasy": {
                                    intro: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/splash/intro.png",
                                    idle: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/splash/loop.png"
                                },
                                "Cooking": {
                                    intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/sushi-mania/intro.png",
                                    idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/sushi-mania/idle.png"
                                },
                                "Psychology": {
                                    intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-04/all-nighter/idle-frame.png",
                                    idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-04/all-nighter/idle-lights.png"
                                },
                                "Art": {
                                    intro: "https://cdn.discordapp.com/assets/profile_effects/effects/sunrise-grove/intro.png",
                                    idle: "https://cdn.discordapp.com/assets/profile_effects/effects/twilight-grove/idle.png"
                                },
                                "Children's Books": {
                                    intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-15/doodlebob-takeover/intro_479359c2.png",
                                    idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-15/doodlebob-takeover/idle.png"
                                },
                                "Mystery": {
                                    intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-25/spirit-of-the-kitsune/intro.png",
                                    idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-25/spirit-of-the-kitsune/idle.png"
                                },
                                "Romance": {
                                    intro: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/magic-girl/intro.png",
                                    idle: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/magic-girl/loop.png"
                                },
                                "Science": {
                                    intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-14/arcane-epiphany/intro.png",
                                    idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-14/arcane-epiphany/idle.png"
                                },
                                "Adventure": {
                                    intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2023-10-11/vines/intro.png",
                                    idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2023-10-11/vines/loop.png"
                                },
                                "Horror": {
                                    intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-09-23/bubblegum-zombie-slime/intro.png",
                                    idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-09-23/bubblegum-zombie-slime/idle.png"
                                },
                                "Default": {
                                    intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-08-08/sakura-katana/intro.png",
                                    idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-08-08/sakura-katana/idle.png"
                                }
                            };

                                const category = "@book.Category".trim();
                                const effects = categoryEffects[category] || categoryEffects["Default"];

                                modal.addEventListener('shown.bs.modal', () => {
                                    if (effectOverlay) {
                                        effectOverlay.style.backgroundImage = 'none';

                                        const introGif = `${effects.intro}?${new Date().getTime()}`;
                                        const idleGif = effects.idle;

                                        setTimeout(() => {
                                            effectOverlay.style.backgroundImage = `url("${introGif}")`;
                                            effectOverlay.style.backgroundSize = 'cover';

                                            setTimeout(() => {
                                                effectOverlay.style.backgroundImage = `url("${idleGif}")`;
                                            }, 3100);
                                        }, 50);
                                    }
                                });

                                modal.addEventListener('hidden.bs.modal', () => {
                                    if (effectOverlay) {
                                        effectOverlay.style.backgroundImage = 'none';
                                    }
                                });
                            });
                        </script>
                    </div>

                </div>
            </div>
        </div>
    }
</div>

<!-- Script to Filter Library -->
<script>
    function filterByCategory(category) {
        const url = new URL(window.location.href);
        url.searchParams.set('categoryFilter', decodeURIComponent(category)); // Update or add the `categoryFilter` query parameter
        url.searchParams.delete('search'); // Optional: Clear the search query when changing the category
        window.location.href = url.toString(); // Redirect to the updated URL
    }

    document.addEventListener('DOMContentLoaded', () => {
        const returnButtons = document.querySelectorAll('.return-button');

        returnButtons.forEach(button => {
            button.addEventListener('click', function () {
                const transactionId = this.getAttribute('data-transaction-id');
                const bookId = this.getAttribute('data-book-id');

                if (confirm("Are you sure you want to return this book?")) {
                    fetch(`/Books/ReturnBook`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "X-Requested-With": "XMLHttpRequest"
                        },
                        body: JSON.stringify({ transactionId })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert(data.message);
                            location.reload(); // Reload the page to refresh the library
                        } else {
                            alert(data.message);
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("An error occurred while returning the book.");
                    });
                }
            });
        });
    });
</script>