@model IEnumerable<Service_Library.Models.Book>

<h1 class="mb-4 library-header">My Library</h1>
<div class="position-relative mb-3">
    <button class="btn btn-primary" id="filterToggle">Filter</button>
    <div id="filterPanel" class="p-3 bg-light border rounded position-absolute top-100 w-100 shadow">
        <div class="mb-3">
            <label for="categoryDropdown" class="form-label">Category</label>
            <select id="categoryDropdown" class="form-select">
                <option value="">All Categories</option>
                @foreach (var category in ViewBag.Categories as IEnumerable<string>)
                {
                    var isSelected = ViewContext.HttpContext.Request.Query["categoryFilter"] == category ? "selected" : "";
                    @: <option value="@category" @isSelected>@category</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <label for="genreDropdown" class="form-label">Genres</label>
            <select id="genreDropdown" class="form-select" multiple>
                <option value="">All Genres</option>
                @foreach (var genre in ViewBag.Genres as IEnumerable<string>)
                {
                    var isSelected = ViewContext.HttpContext.Request.Query["genreFilter"].Contains(genre) ? "selected" : "";
                    @: <option value="@genre" @isSelected>@genre</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label for="authorDropdown" class="form-label">Author</label>
            <select id="authorDropdown" class="form-select">
                <option value="">All Authors</option>
                @foreach (var author in ViewBag.Authors as IEnumerable<string>)
                {
                    var isSelected = ViewContext.HttpContext.Request.Query["authorFilter"] == author ? "selected" : "";
                    @: <option value="@author" @isSelected>@author</option>
                }
            </select>
        </div>

        <div class="mb3">
            <label for="sortDropdown" class="form-label">Sort By</label>
            <select id="sortDropdown" class="form-select">
                @foreach (var sortOption in new[]
                {
                    new { Value = "", Text = "Clear Sort" },
                    new { Value = "price-asc", Text = "Price (Low to High)" },
                    new { Value = "price-desc", Text = "Price (High to Low)" },
                    new { Value = "most-popular", Text = "Most Popular" },
                    new { Value = "genre", Text = "Genre" },
                    new { Value = "year", Text = "Year of Publishing" }
                })
                {
                    var isSelected = ViewContext.HttpContext.Request.Query["sort"] == sortOption.Value ? "selected" : "";
                    @: <option value="@sortOption.Value" @isSelected>@sortOption.Text</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label for="buyBorrowDropdown" class="form-label">Availability</label>
            <select id="buyBorrowDropdown" class="form-select">
                <option value="">All</option>
                <option value="buy" selected="@(ViewContext.HttpContext.Request.Query["availability"] == "buy")">Buy Only</option>
                <option value="borrow" selected="@(ViewContext.HttpContext.Request.Query["availability"] == "borrow")">Borrow Only</option>
            </select>
        </div>

        <div class="mb-3">
            <label for="priceRange" class="form-label">Price Range</label>
            <div id="priceRangeSlider"></div>
            <input type="hidden" id="priceRangeMin" name="priceRangeMin" value="@ViewContext.HttpContext.Request.Query["priceRangeMin"]" data-min-price="@ViewBag.MinPrice">
            <input type="hidden" id="priceRangeMax" name="priceRangeMax" value="@ViewContext.HttpContext.Request.Query["priceRangeMax"]" data-max-price="@ViewBag.MaxPrice">
            <div class="d-flex justify-content-between">
                <span id="priceRangeMinLabel"></span>
                <span id="priceRangeMaxLabel"></span>
            </div>
        </div>

        <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="onSaleCheckbox" @(ViewContext.HttpContext.Request.Query["onSale"] == "true" ? "checked" : "")>
            <label class="form-check-label" for="onSaleCheckbox">Show Only Discounted Books</label>
        </div>

        <div class="text-end">
            <button class="btn btn-success" onclick="applyFilters()">Apply</button>
        </div>
    </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/14.6.3/nouislider.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/14.6.3/nouislider.min.css" rel="stylesheet">

<div class="book-container">
    @foreach (var book in Model)
    {
        <script>
            function attachHoverEffects() {
                const cards = document.querySelectorAll('.book-card');

                cards.forEach((card) => {
                    const category = card.getAttribute('data-category');
                    const categoryEffects = {
                        "Graphic Novels": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/ki-detonate/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/ki-detonate/idle.png"
                        },
                        "Business": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-07/d20/intro_success.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-07/d20/idle_success.png"
                        },
                        "Biography": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-25/twilight/intro_56dbd2384f.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-25/twilight/loop_ff3e249d19.png"
                        },
                        "Sports": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-05/paint-the-town-blue/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-05/paint-the-town-blue/idle.png"
                        },
                        "Science Fiction": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-01/spirit-flame/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-01/spirit-flame/idle.png"
                        },
                        "Technology": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-1-19/cyberpunk-nightrunner/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-1-18/cyberpunk-nightrunner/idle.png"
                        },
                        "History": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-05-10/forgotten-treasure/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-05-09/forgotten-treasure/idle.png"
                        },
                        "Fantasy": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/splash/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/splash/loop.png"
                        },
                        "Cooking": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/sushi-mania/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/sushi-mania/idle.png"
                        },
                        "Psychology": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-04/all-nighter/idle-frame.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-04/all-nighter/idle-lights.png"
                        },
                        "Art": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/sunrise-grove/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/twilight-grove/idle.png"
                        },
                        "Children's Books": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-13/plushie-party/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-13/plushie-party/idle.png"
                        },
                        "Mystery": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-25/spirit-of-the-kitsune/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-25/spirit-of-the-kitsune/idle.png"
                        },
                        "Romance": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/dreamy/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/dreamy/idle.png"
                        },
                        "Science": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-14/arcane-epiphany/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-14/arcane-epiphany/idle.png"
                        },
                        "Adventure": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2023-10-11/vines/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2023-10-11/vines/loop.png"
                        },
                        "Horror": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-09-23/bubblegum-zombie-slime/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-09-23/bubblegum-zombie-slime/idle.png"
                        },
                        "Default": {
                            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-08-08/sakura-katana/intro.png",
                            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-08-08/sakura-katana/idle.png"
                        }
                    };

                    const effects = categoryEffects[category] || categoryEffects["Default"];
                    let introTimeout;

                    card.onmouseenter = null;
                    card.onmouseleave = null;

                    card.addEventListener('mouseenter', () => {
                        clearTimeout(introTimeout);

                        const introGif = `${effects.intro}?${new Date().getTime()}`;
                        const idleGif = effects.idle;

                        card.style.setProperty('--background-image', 'none');
                        setTimeout(() => {
                            card.style.setProperty('--background-image', `url("${introGif}")`);

                            introTimeout = setTimeout(() => {
                                card.style.setProperty('--background-image', `url("${idleGif}")`);
                            }, 4500);
                        }, 10);
                    });

                    card.addEventListener('mouseleave', () => {
                        clearTimeout(introTimeout);
                        card.style.setProperty('--background-image', `url("${effects.idle}")`);
                    });
                });
            }
            document.addEventListener('DOMContentLoaded', attachHoverEffects);
            function updateCards() {
                attachHoverEffects();
            }
        </script>
        <div class="book-card" data-category="@book.Category" data-bs-toggle="modal" data-bs-target="#bookModal-@book.BookId">
            @if (book.CoverImage != null)
            {
                <img src="data:image/png;base64,@(Convert.ToBase64String(book.CoverImage))"
                     alt="Cover Image" class="book-cover" />
            }
            @{
                int ageLimit;
                if (int.TryParse(book.AgeLimit, out ageLimit) && ageLimit > 0)
                {
                    <div class="age-limit-badge">
                        @ageLimit+
                    </div>
                }
            }
            <div class="book-info">
                @if (!string.IsNullOrEmpty(book.Title) && book.Title.Length <= 18)
                {
                    <h6 class="book-title">@book.Title</h6>
                }
                else
                {
                    <h6 class="book-title">@book.Title.Substring(0, 18)...</h6>
                }
                @if (!string.IsNullOrEmpty(book.Author) && book.Author.Length <= 18)
                {
                    <p>@book.Author</p>
                }
                else
                {
                    <p>@book.Author.Substring(0, 18)...</p>
                }
                <p style="font-weight: bold;">
                    @if (!string.IsNullOrEmpty(book.RemainingBorrowTime))
                    {
                        <span style="color: #ffc107;">Borrowed</span>
                    }
                    else
                    {
                        <span style="color: #d21e3c;">Bought</span>
                    }
                </p>

                @if (!string.IsNullOrEmpty(book.RemainingBorrowTime))
                {
                    <p class="text-danger">Borrow Time Remaining: @book.RemainingBorrowTime</p>
                    <button class="btn btn-warning return-button"
                            data-transaction-id="@book.BorrowTransactionId"
                            data-book-id="@book.BookId">
                        Return Book
                    </button>
                }

                @if (string.IsNullOrEmpty(book.RemainingBorrowTime))
                {
                    <p class="text-success">Purchased: This book is yours forever!</p>
                }
            </div>
        </div>

        <div class="modal fade" id="bookModal-@book.BookId" tabindex="-1" aria-labelledby="bookModalLabel-@book.BookId" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="bookModalLabel-@book.BookId">@book.Title</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="book-details">
                            <p><strong>Author:</strong> @book.Author</p>
                            <p><strong>Publisher:</strong> @book.Publisher</p>
                            <p><strong>Publishing Year:</strong> @book.YearOfPublishing</p>
                            <p><strong>Category:</strong> @book.Category</p>
                            <p><strong>Genre:</strong> 
                            @{
                                var genreNames = new List<string>();
                                foreach (var genre in book.Genres)
                                {
                                    genreNames.Add(genre.Name);
                                }
                                @string.Join(", ", genreNames)
                            }
                            </p>
                            <form method="post" asp-controller="Books" asp-action="DownloadBook">
                                <input type="hidden" name="bookId" value="@book.BookId" />
                                <div class="form-group">
                                    <label for="downloadFormat">Download Format</label>
                                    <select class="form-control" id="downloadFormat" name="targetFormat" required>
                                        <option value="PDF">PDF</option>
                                        <option value="EPUB">EPUB</option>
                                        <option value="MOBI">MOBI</option>
                                        <option value="FB2">FB2</option>
                                    </select>
                                </div>
                                <button type="submit" class="btn btn-primary">Download</button>
                            </form>

                            @if (!string.IsNullOrEmpty(book.RemainingBorrowTime))
                            {
                                <p class="text-danger">Borrow Time Remaining: @book.RemainingBorrowTime</p>
                                <button class="btn btn-warning"
                                        onclick="confirmReturnBook('@book.BorrowTransactionId', '@book.BookId')">
                                    Return Book
                                </button>
                            }
                            else
                            {
                                <button class="btn btn-danger delete-button" data-book-id="@book.BookId">
                                    Delete from Library
                                </button>
                            }


                            
                            <div class="modal-buttons" id="button-container-@book.BookId">
                                <hr />
                                <h5>Book Feedback</h5>

                                @if (book.Feedbacks != null && book.Feedbacks.Count > 0)
                                {
                                    foreach (var feedback in book.Feedbacks)
                                    {
                                        <div class="existing-feedback mb-2">
                                            <div class="display-rating">
                                                @for (int i = 1; i <= 5; i++)
                                                {
                                                    <span style="color:@(i <= feedback.Rating ? "gold" : "gray");">&#9733;</span>
                                                }
                                            </div>
                                            <p class="mt-1 mb-0"><em>@feedback.Comment</em></p>
                                            <small>@feedback.FirstName @feedback.LastName on @feedback.Date.ToShortDateString()</small>
                                            <hr />
                                        </div>
                                    }
                                }
                                else
                                {
                                    <p>No feedback yet. Be the first to comment!</p>
                                }
                                <div class="your-feedback">
                                    <h6>Your Feedback</h6>
                                    <div class="star-rating" data-book-id="@book.BookId" data-selected-rating="@(book.UserRating ?? 0)">
                                        <span class="star @( (book.UserRating ?? 0) >= 1 ? "selected" : "" )" data-value="1">&#9733;</span>
                                        <span class="star @( (book.UserRating ?? 0) >= 2 ? "selected" : "" )" data-value="2">&#9733;</span>
                                        <span class="star @( (book.UserRating ?? 0) >= 3 ? "selected" : "" )" data-value="3">&#9733;</span>
                                        <span class="star @( (book.UserRating ?? 0) >= 4 ? "selected" : "" )" data-value="4">&#9733;</span>
                                        <span class="star @( (book.UserRating ?? 0) >= 5 ? "selected" : "" )" data-value="5">&#9733;</span>
                                    </div>

                                    <textarea id="feedback-comment-@book.BookId" class="form-control mt-2" rows="3"
                                                placeholder="Leave your comment here...">@book.UserComment</textarea>

                                    <button type="button" class="btn btn-info mt-2 submit-feedback-button" data-book-id="@book.BookId">
                                        Submit Feedback
                                    </button>
                                </div>
                                @if (book.AverageRating > 0)
                                {
                                    <div class="average-rating mb-3">
                                        <strong>Average Rating:</strong>
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <span style="color:@(i <= Math.Round(book.AverageRating) ? "gold" : "gray");">&#9733;</span>
                                        }
                                        <small>(@book.RatingCount ratings)</small>
                                    </div>
                                }
                                else
                                {
                                    <div class="average-rating mb-3">
                                        <strong>Average Rating:</strong> No ratings yet.
                                    </div>
                                }
                            </div>
                            



                        </div>
                       @if (book.CoverImage != null)
                        {
                            <div class="book-image-container position-relative" id="modalBookContainer-@book.BookId">
                                <img src="data:image/png;base64,@(Convert.ToBase64String(book.CoverImage))"
                                     alt="Book Cover Image" class="img-fluid" />
                                <div class="effect-overlay"></div>
                                @{
                                    if (int.TryParse(book.AgeLimit, out ageLimit) && ageLimit > 0)
                                    {
                                        <div class="age-limit-badge position-absolute top-0 end-4 m-2">
                                            @ageLimit+
                                        </div>
                                    }
                                }
                            </div>
                        }

                        <script>
                            document.addEventListener('DOMContentLoaded', () => {
                                const modal = document.getElementById('bookModal-@book.BookId');
                                const effectOverlay = document.querySelector('#modalBookContainer-@book.BookId .effect-overlay');
                                const categoryEffects = {
                                    "Graphic Novels": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/ki-detonate/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/ki-detonate/idle.png"
                                    },
                                    "Business": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-07/d20/intro_success.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-07/d20/idle_success.png"
                                    },
                                    "Biography": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-25/twilight/intro_56dbd2384f.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-25/twilight/loop_ff3e249d19.png"
                                    },
                                    "Sports": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-05/paint-the-town-blue/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-05/paint-the-town-blue/idle.png"
                                    },
                                    "Science Fiction": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-01/spirit-flame/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-01/spirit-flame/idle.png"
                                    },
                                    "Technology": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-1-19/cyberpunk-nightrunner/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-1-18/cyberpunk-nightrunner/idle.png"
                                    },
                                    "History": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-05-10/forgotten-treasure/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-05-09/forgotten-treasure/idle.png"
                                    },
                                    "Fantasy": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/splash/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/splash/loop.png"
                                    },
                                    "Cooking": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/sushi-mania/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/sushi-mania/idle.png"
                                    },
                                    "Psychology": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-04/all-nighter/idle-frame.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-04/all-nighter/idle-lights.png"
                                    },
                                    "Art": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/sunrise-grove/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/twilight-grove/idle.png"
                                    },
                                    "Children's Books": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-13/plushie-party/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-13/plushie-party/idle.png"
                                    },
                                    "Mystery": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-25/spirit-of-the-kitsune/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-25/spirit-of-the-kitsune/idle.png"
                                    },
                                    "Romance": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/dreamy/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/dreamy/idle.png"
                                    },
                                    "Science": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-14/arcane-epiphany/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-14/arcane-epiphany/idle.png"
                                    },
                                    "Adventure": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2023-10-11/vines/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2023-10-11/vines/loop.png"
                                    },
                                    "Horror": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-09-23/bubblegum-zombie-slime/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-09-23/bubblegum-zombie-slime/idle.png"
                                    },
                                    "Default": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-08-08/sakura-katana/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-08-08/sakura-katana/idle.png"
                                    }
                                };

                                function decodeHtml(html) {
                                    const txt = document.createElement('textarea');
                                    txt.innerHTML = html;
                                    return txt.value;
                                }

                                const category = decodeHtml("@book.Category".trim());
                                const effects = categoryEffects[category] || categoryEffects["Default"];

                                if (modal && effectOverlay) {
                                    modal.addEventListener('shown.bs.modal', () => {
                                        effectOverlay.style.backgroundImage = 'none';

                                        const introGif = `${effects.intro}?${new Date().getTime()}`;
                                        const idleGif = effects.idle;

                                        setTimeout(() => {
                                            effectOverlay.style.backgroundImage = `url("${introGif}")`;
                                            effectOverlay.style.backgroundSize = 'cover';

                                            setTimeout(() => {
                                                effectOverlay.style.backgroundImage = `url("${idleGif}")`;
                                            }, 3150);
                                        }, 150);
                                    });

                                    modal.addEventListener('hidden.bs.modal', () => {
                                        effectOverlay.style.backgroundImage = 'none';
                                    });
                                }
                            });
                        </script>

                    </div>

                </div>
            </div>
        </div>
    }
</div>

<script>
    function filterByCategory(category) {
        const url = new URL(window.location.href);
        url.searchParams.set('categoryFilter', decodeURIComponent(category));
        url.searchParams.delete('search');
        window.location.href = url.toString();
    }

    document.addEventListener('DOMContentLoaded', () => {
        const returnButtons = document.querySelectorAll('.return-button');

        returnButtons.forEach(button => {
            button.addEventListener('click', function () {
                const transactionId = this.getAttribute('data-transaction-id');
                const bookId = this.getAttribute('data-book-id');

                if (confirm("Are you sure you want to return this book?")) {
                    fetch(`/Books/ReturnBook`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "X-Requested-With": "XMLHttpRequest"
                        },
                        body: JSON.stringify({ transactionId })
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            alert(data.message);
                            location.reload();
                        } else {
                            alert(data.message);
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        alert("An error occurred while returning the book.");
                    });
                }
            });
        });
    });
</script>