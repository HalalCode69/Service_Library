@{
    ViewBag.Title = "Books";
}

@if (ViewBag.Message != null)
{
    <div class="alert alert-info alert-info-short">
        @ViewBag.Message
    </div>
}


<!-- Filter Button -->
<div class="position-relative mb-3">
    <button class="btn btn-primary" id="filterToggle">Filter</button>
    <div id="filterPanel" class="p-3 bg-light border rounded position-absolute top-100 w-100 shadow">
        <!-- Categories Dropdown -->
        <div class="mb-3">
            <label for="categoryDropdown" class="form-label">Category</label>
            <select id="categoryDropdown" class="form-select">
                <option value="">All Categories</option>
                @foreach (var category in ViewBag.Categories as IEnumerable<string>)
                {
                    var isSelected = ViewContext.HttpContext.Request.Query["categoryFilter"] == category ? "selected" : "";
                    @: <option value="@category" @isSelected>@category</option>
                }
            </select>
        </div>

        <!-- Authors Dropdown -->
        <div class="mb-3">
            <label for="authorDropdown" class="form-label">Author</label>
            <select id="authorDropdown" class="form-select">
                <option value="">All Authors</option>
                @foreach (var author in ViewBag.Authors as IEnumerable<string>)
                {
                    var isSelected = ViewContext.HttpContext.Request.Query["authorFilter"] == author ? "selected" : "";
                    @: <option value="@author" @isSelected>@author</option>
                }
            </select>
        </div>

        <!-- Sort By Dropdown -->
        <div class="mb3">
            <label for="sortDropdown" class="form-label">Sort By</label>
            <select id="sortDropdown" class="form-select">
                @foreach (var sortOption in new[]
                {
                    new { Value = "", Text = "Clear Sort" },
                    new { Value = "price-asc", Text = "Price (Low to High)" },
                    new { Value = "price-desc", Text = "Price (High to Low)" },
                    new { Value = "most-popular", Text = "Most Popular" },
                    new { Value = "genre", Text = "Genre" },
                    new { Value = "year", Text = "Year of Publishing" }
                })
                {
                    var isSelected = ViewContext.HttpContext.Request.Query["sort"] == sortOption.Value ? "selected" : "";
                    @: <option value="@sortOption.Value" @isSelected>@sortOption.Text</option>
                }
            </select>
        </div>

        <!-- Buying/Borrowing Dropdown -->
        <div class="mb-3">
            <label for="buyBorrowDropdown" class="form-label">Availability</label>
            <select id="buyBorrowDropdown" class="form-select">
                <option value="">All</option>
                <option value="buy" selected="@(ViewContext.HttpContext.Request.Query["availability"] == "buy")">Buy Only</option>
                <option value="borrow" selected="@(ViewContext.HttpContext.Request.Query["availability"] == "borrow")">Borrow Only</option>
            </select>
        </div>

        <!-- Price Range -->
        <div class="mb-3">
            <label for="priceRange" class="form-label">Price Range</label>
            <div id="priceRangeSlider"></div>
            <input type="hidden" id="priceRangeMin" name="priceRangeMin" value="@ViewContext.HttpContext.Request.Query["priceRangeMin"]" data-min-price="@ViewBag.MinPrice">
            <input type="hidden" id="priceRangeMax" name="priceRangeMax" value="@ViewContext.HttpContext.Request.Query["priceRangeMax"]" data-max-price="@ViewBag.MaxPrice">
            <div class="d-flex justify-content-between">
                <span id="priceRangeMinLabel"></span>
                <span id="priceRangeMaxLabel"></span>
            </div>
        </div>

        <!-- Discounted Books Checkbox -->
        <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="onSaleCheckbox" @(ViewContext.HttpContext.Request.Query["onSale"] == "true" ? "checked" : "")>
            <label class="form-check-label" for="onSaleCheckbox">Show Only Discounted Books</label>
        </div>

        <!-- Apply Filter Button -->
        <div class="text-end">
            <button class="btn btn-success" onclick="applyFilters()">Apply</button>
        </div>
    </div>
</div>
<script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/14.6.3/nouislider.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/14.6.3/nouislider.min.css" rel="stylesheet">




<script>
    // JavaScript function for sorting books
    function sortBooks(sortOption) {
        const url = new URL(window.location.href);
        if (sortOption) {
            url.searchParams.set('sort', sortOption); // Update or add the `sort` query parameter
        } else {
            url.searchParams.delete('sort'); // Remove the `sort` query parameter
        }
        window.location.href = url.toString(); // Redirect to the updated URL
    }
</script>



<script>
    // JavaScript function for filtering by category
    function filterByCategory(category) {
    const url = new URL(window.location.href);
    url.searchParams.set('categoryFilter', decodeURIComponent(category)); // Update or add the `categoryFilter` query parameter
    url.searchParams.delete('search'); // Optional: Clear the search query when changing the category
    window.location.href = url.toString(); // Redirect to the updated URL
    }
</script>
<div class="book-container">

    @foreach (var book in Model)
    {
        <script>
            // Function to attach hover effects to all book cards
            function attachHoverEffects() {
            const cards = document.querySelectorAll('.book-card');

            cards.forEach((card) => {
            const category = card.getAttribute('data-category'); // Get category
            const categoryEffects = {
            "Graphic Novels": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/ki-detonate/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/ki-detonate/idle.png"
            },
            "Business": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-07/d20/intro_success.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-07/d20/idle_success.png"
            },
            "Biography": {
                intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-25/twilight/intro_56dbd2384f.png",
                idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-25/twilight/loop_ff3e249d19.png"
            },
            "Sports": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-05/paint-the-town-blue/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-05/paint-the-town-blue/idle.png"
            },
            "Science Fiction": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-01/spirit-flame/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-01/spirit-flame/idle.png"
            },
            "Technology": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-1-19/cyberpunk-nightrunner/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-1-18/cyberpunk-nightrunner/idle.png"
            },
            "History": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-05-10/forgotten-treasure/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-05-09/forgotten-treasure/idle.png"
            },
            "Fantasy": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/splash/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/splash/loop.png"
            },
            "Cooking": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/sushi-mania/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/sushi-mania/idle.png"
            },
            "Psychology": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-04/all-nighter/idle-frame.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-04/all-nighter/idle-lights.png"
            },
            "Art": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/sunrise-grove/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/twilight-grove/idle.png"
            },
            "Children's Books": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-13/plushie-party/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-13/plushie-party/idle.png"
            },
            "Mystery": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-25/spirit-of-the-kitsune/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-25/spirit-of-the-kitsune/idle.png"
            },
            "Romance": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/dreamy/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/dreamy/idle.png"
            },
            "Science": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-14/arcane-epiphany/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-14/arcane-epiphany/idle.png"
            },
            "Adventure": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2023-10-11/vines/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2023-10-11/vines/loop.png"
            },
            "Horror": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-09-23/midnight-zombie-slime/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-09-23/midnight-zombie-slime/idle.png"
            },
            "Default": {
            intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-08-08/sakura-katana/intro.png",
            idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-08-08/sakura-katana/idle.png"
            }
            };

            const effects = categoryEffects[category] || categoryEffects["Default"];
            let introTimeout;

            // Remove any existing event listeners to avoid duplication
            card.onmouseenter = null;
            card.onmouseleave = null;

            // Add hover event listeners
            card.addEventListener('mouseenter', () => {
            clearTimeout(introTimeout); // Clear previous timeout

            const introGif = `${effects.intro}?${new Date().getTime()}`;
            const idleGif = effects.idle;

            card.style.setProperty('--background-image', 'none'); // Reset background

            setTimeout(() => {
            card.style.setProperty('--background-image', `url("${introGif}")`);

            introTimeout = setTimeout(() => {
            card.style.setProperty('--background-image', `url("${idleGif}")`);
            }, 4500); // Change to idle after 4.5 seconds
            }, 10);
            });

            card.addEventListener('mouseleave', () => {
            clearTimeout(introTimeout); // Stop the intro effect
            card.style.setProperty('--background-image', `url("${effects.idle}")`);
            });
            });
            }
            // Ensure hover effects are applied on page load
            document.addEventListener('DOMContentLoaded', attachHoverEffects);

            // Reapply hover effects when dynamically updating cards
            function updateCards() {
            attachHoverEffects();
            }
        </script>




        <div class="book-card" data-category="@book.Category" data-bs-toggle="modal" data-bs-target="#bookModal-@book.BookId">
            @if (book.CoverImage != null)
            {
                <img src="data:image/png;base64,@(Convert.ToBase64String(book.CoverImage))"
                alt="Cover Image" class="book-cover" />
            }
            <!-- Age Limit Badge -->
            @{
                int ageLimit;
                if (int.TryParse(book.AgeLimit, out ageLimit) && ageLimit > 0)
                {
                    <div class="age-limit-badge">
                        @ageLimit+
                    </div>
                }
            }

            <div class="book-info">
                @if (!string.IsNullOrEmpty(book.Title) && book.Title.Length <= 18)
                {
                    <h6 class="book-title">@book.Title</h6>
                }
                else
                {
                    <h6 class="book-title">@book.Title.Substring(0, 18)...</h6>
                }
                @if (!string.IsNullOrEmpty(book.Author) && book.Author.Length <= 18)
                {
                    <p>@book.Author</p>
                }
                else
                {
                    <p>@book.Author.Substring(0, 18)...</p>
                }

                <!-- Indicate Borrowed or Bought, or Show Price if Neither -->
                @if (!string.IsNullOrEmpty(book.RemainingBorrowTime))
                {
                    <p style="font-weight: bold; color: #ffc107;">Borrowed</p>
                }
                else if (book.IsOwnedByCurrentUser)
                {
                    <p style="font-weight: bold; color: #d21e3c;">Bought</p>
                }
                else
                {
                    <!-- Display Price/Discount Information -->
                    @if (book.DiscountPrice > 0 && book.DiscountEndDate >= DateTime.Now)
                    {
                        <p class="book-price">
                            <span class="strike-price">$@book.PreviousBuyPrice.ToString("F2")</span>
                            <span class="discount-price">$@book.DiscountPrice.ToString("F2")</span>
                        </p>
                        <p style="font-size: 0.8rem; color: gray;">
                            Discount ends on: @book.DiscountEndDate.ToShortDateString()
                        </p>
                    }
                    else
                    {
                        <p class="book-price">$@book.BuyPrice.ToString("F2")</p>
                    }
                }

                <!-- Waiting List Count -->
                <p class="text-info">Waiting List: @book.WaitingListCount users</p>

                <!-- User Waiting List Information -->
                @if (book.IsUserOnWaitingList)
                {
                    <p class="text-warning">You are in position: @book.UserWaitingPosition</p>
                    <form method="post" asp-controller="Books" asp-action="LeaveWaitingList">
                        <input type="hidden" name="bookId" value="@book.BookId" />
                        <button type="submit" class="btn btn-danger btn-sm">Leave Waiting List</button>
                    </form>
                }
         
            </div>

        </div>
        <!-- Modal for Book Details -->
        <div class="modal fade" id="bookModal-@book.BookId" tabindex="-1" aria-labelledby="bookModalLabel-@book.BookId" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="bookModalLabel-@book.BookId">@book.Title</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>

                    <div class="modal-body">
                        <!-- Book Details Section -->
                        <div class="book-details">
                            <div>
                                <p><strong>Author:</strong> @book.Author</p>
                                <p><strong>Publisher:</strong> @book.Publisher</p>
                                <p><strong>Publishing Year:</strong> @book.YearOfPublishing</p>
                                <p><strong>Category:</strong> @book.Category</p>

                                @if (!book.IsBorrowable)
                                {
                                    <p class="book-price">
                                        <strong>Borrow Price:</strong>
                                        <span class="strike-price" style="text-decoration: line-through; margin-left: 5px; color: gray;">$@book.BorrowPrice.ToString("F2")</span>
                                    </p>
                                }
                                else
                                {
                                    <p class="book-price">
                                        <strong style ="color: inherit;">Borrow Price:</strong>
                                        <span style="color: #007bff; font-weight: bold; margin-left: 5px;">$@book.BorrowPrice.ToString("F2")</span>
                                        <strong style="color: inherit;"> for 30 days.</strong>
                                    </p>

                                }

                                <!-- Discounted Price Logic -->
                                @if (book.DiscountPrice > 0 && book.DiscountEndDate >= DateTime.Now)
                                {
                                    <p class="book-price">
                                        <strong>Buy Price:</strong>
                                        <span class="strike-price" style="text-decoration: line-through; margin-left: 5px; color: gray;">$@book.PreviousBuyPrice.ToString("F2")</span>
                                        <span class="discount-price" style="color: red; font-weight: bold; margin-left: 10px;">$@book.DiscountPrice.ToString("F2")</span>
                                    </p>
                                    <p style="font-size: 0.8rem; color: gray;">
                                        Discount ends on: @book.DiscountEndDate.ToShortDateString()
                                    </p>
                                }
                                else
                                {
                                    <p class="book-price">
                                        <strong>Buy Price:</strong>
                                        <span style="color: #007bff; font-weight: bold; margin-left: 5px;">$@book.BuyPrice.ToString("F2")</span>
                                    </p>
                                }
                            </div>

                            <!-- Buttons Section -->
                            <div class="modal-buttons" id="button-container-@book.BookId">
                                @if (book.IsOwnedByCurrentUser)
                                {
                                    <p class="text-success"><strong>You own this book!</strong></p>
                                    <!-- Inside the modal where the download button is located -->
                                    <form method="post" asp-controller="Books" asp-action="DownloadBook">
                                        <input type="hidden" name="bookId" value="@book.BookId" />
                                        <div class="form-group">
                                            <label for="downloadFormat">Download Format</label>
                                            <select class="form-control" id="downloadFormat" name="targetFormat" required>
                                                <option value="PDF">PDF</option>
                                                <option value="EPUB">EPUB</option>
                                                <option value="MOBI">MOBI</option>
                                                <option value="FB2">FB2</option>
                                            </select>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Download</button>
                                    </form>
                                }
                                else if (book.IsReservedForCurrentUser)
                                {
                                    <p class="text-info"><strong>Reserved for You:</strong> You have 24 hours to borrow this book.</p>
                                    <button type="button" class="btn btn-primary borrow-now-button" data-book-id="@book.BookId" data-book-title="@book.Title" data-book-price="@book.BorrowPrice">Borrow Now</button>
                                    <form method="post" asp-controller="Books" asp-action="LeaveWaitingList">
                                        <input type="hidden" name="bookId" value="@book.BookId" />
                                        <button class="btn btn-warning btn-sm mt-2 release-reservation-button" data-book-id="@book.BookId">Release Reservation</button>
                                    </form>
                                }
                                else if (book.IsReservedForOtherUser && User.Identity.IsAuthenticated && !book.IsAlreadyBorrowed)
                                {
                                    <p class="text-danger"><strong>Reserved:</strong> This book is currently reserved for another user.</p>
                                    @if (!book.IsUserOnWaitingList)
                                    {
                                        <p id="waiting-list-count-@book.BookId" class="text-info">Users in Waitlist for borrow: @book.WaitingListCount</p>
                                        <p class="text-info">Estimated availability: @book.EstimatedAvailabilityInDays days</p>
                                        <button class="btn btn-warning btn-sm join-waiting-list-button" data-book-id="@book.BookId">
                                            Join Waiting List
                                        </button>
                                    }
                                    else
                                    {
                                        <p id="waiting-list-count-@book.BookId" class="text-warning">You are in position: @book.UserWaitingPosition</p>
                                        <p class="text-info">Estimated availability: @book.EstimatedAvailabilityInDays days</p>
                                        <button class="btn btn-danger btn-sm leave-waiting-list-button" data-book-id="@book.BookId">
                                            Leave Waiting List
                                        </button>
                                    }
                                }
                                else if (book.IsAlreadyBorrowed)
                                {
                                    <p class="text-success"><strong>Borrowed:</strong> <span id="remaining-time-@book.BookId">@book.RemainingBorrowTime</span></p>
                                    <button class="btn btn-danger return-button" data-transaction-id="@book.BorrowTransactionId" data-book-id="@book.BookId">Return Book</button>
                                    <button type="button" class="btn btn-primary buy-now-button" data-book-id="@book.BookId" data-book-title="@book.Title" data-book-price="@book.BuyPrice">Buy Now</button>
                                    <!-- Inside the modal where the download button is located -->
                                    <form method="post" asp-controller="Books" asp-action="DownloadBook">
                                        <input type="hidden" name="bookId" value="@book.BookId" />
                                        <div class="form-group">
                                            <label for="downloadFormat">Download Format</label>
                                            <select class="form-control" id="downloadFormat" name="targetFormat" required>
                                                <option value="PDF">PDF</option>
                                                <option value="EPUB">EPUB</option>
                                                <option value="MOBI">MOBI</option>
                                                <option value="FB2">FB2</option>
                                            </select>
                                        </div>
                                        <button type="submit" class="btn btn-primary">Download</button>
                                    </form>
                                }
                                else
                                {
                                    @if (!book.IsBorrowable)
                                    {
                                        <p class="text-danger"><strong>Not Available to Borrow</strong></p>
                                    }
                                    else if (book.AvailableCopies > 0 && book.ActiveBorrowCount < 3)
                                    {
                                        @if (User.Identity.IsAuthenticated)
                                        {
                                            <button type="button" class="btn btn-primary borrow-now-button" data-book-id="@book.BookId" data-book-title="@book.Title" data-book-price="@book.BorrowPrice">Borrow Now</button>
                                            <button class="btn btn-primary add-borrow-to-cart-button" data-book-id="@book.BookId" data-book-title="@book.Title" data-book-price="@book.BorrowPrice">Add Borrow to Cart</button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn btn-primary" onclick="alert('Please log in to borrow this book.');">Borrow Now</button>
                                        }
                                    }
                                    else
                                    {
                                        @if (!book.IsUserOnWaitingList)
                                        {
                                            <p id="waiting-list-count-@book.BookId" class="text-info">Users in Waitlist for borrow: @book.WaitingListCount</p>
                                            <p class="text-info">Estimated availability: @book.EstimatedAvailabilityInDays days</p>
                                            <button class="btn btn-warning btn-sm join-waiting-list-button" data-book-id="@book.BookId">
                                                Join Waiting List
                                            </button>
                                        }
                                        else
                                        {
                                            <p id="waiting-list-count-@book.BookId" class="text-warning">You are in position: @book.UserWaitingPosition</p>
                                            <p class="text-info">Estimated availability: @book.EstimatedAvailabilityInDays days</p>
                                            <button class="btn btn-danger btn-sm leave-waiting-list-button" data-book-id="@book.BookId">
                                                Leave Waiting List
                                            </button>
                                        }
                                    }
                                    @if (User.Identity.IsAuthenticated)
                                    {
                                        <button type="button" class="btn btn-primary buy-now-button" data-book-id="@book.BookId" data-book-title="@book.Title" data-book-price="@book.BuyPrice">Buy Now</button>
                                        <button class="btn btn-primary add-to-cart-button" data-book-id="@book.BookId" data-book-title="@book.Title" data-book-price="@book.BuyPrice">Add to Cart</button>
                                        <button class="btn btn-warning remove-from-cart-button mt-2" data-book-id="@book.BookId">Remove from Cart</button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn btn-primary" onclick="alert('Please log in to buy this book.');">Buy Now</button>
                                    }                                    
                                    <!--<button class="btn btn-danger clear-cart-button mt-2">Clear Cart</button>-->
                                }

                               <!-- Feedback Section -->
                                <hr />
                                <h5>Book Feedback</h5>

                                <!-- Show existing comments/ratings from all users for this book -->
                                @if (book.Feedbacks != null && book.Feedbacks.Count > 0)
                                {
                                    <div id="feedback-container-@book.BookId">
                                        @foreach (var feedback in book.Feedbacks)
                                        {
                                            <div class="existing-feedback mb-2">
                                                <!-- Each feedback might show X stars in display mode -->
                                                <div class="display-rating">
                                                    @for (int i = 1; i <= 5; i++)
                                                    {
                                                        <span style="color:@(i <= feedback.Rating ? "gold" : "gray");">&#9733;</span>
                                                    }
                                                </div>
                                                <!-- Display comment -->
                                                <p class="mt-1 mb-0"><em>@feedback.Comment</em></p>
                                                <!-- If you want to show who posted it (first name, last name) and date: -->
                                                <small>@feedback.FirstName @feedback.LastName on @feedback.Date.ToShortDateString()</small>
                                                <hr />
                                            </div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <div id="feedback-container-@book.BookId">
                                        <p>No feedback yet. Be the first to comment!</p>
                                    </div>
                                }
                                @if (book.IsAlreadyBorrowed || book.IsOwnedByCurrentUser)
                                {
                                    <div class="your-feedback">
                                        <h6>Your Feedback</h6>
                                        <div class="star-rating" data-book-id="@book.BookId" data-selected-rating="@(book.UserRating ?? 0)">
                                            <span class="star @( (book.UserRating ?? 0) >= 1 ? "selected" : "" )" data-value="1">&#9733;</span>
                                            <span class="star @( (book.UserRating ?? 0) >= 2 ? "selected" : "" )" data-value="2">&#9733;</span>
                                            <span class="star @( (book.UserRating ?? 0) >= 3 ? "selected" : "" )" data-value="3">&#9733;</span>
                                            <span class="star @( (book.UserRating ?? 0) >= 4 ? "selected" : "" )" data-value="4">&#9733;</span>
                                            <span class="star @( (book.UserRating ?? 0) >= 5 ? "selected" : "" )" data-value="5">&#9733;</span>
                                        </div>

                                        <textarea id="feedback-comment-@book.BookId" class="form-control mt-2" rows="3"
                                                    placeholder="Leave your comment here...">@book.UserComment</textarea>

                                        <button type="button" class="btn btn-info mt-2 submit-feedback-button" data-book-id="@book.BookId">
                                            Submit Feedback
                                        </button>
                                    </div>
                                }
                                else
                                {
                                    <p>
                                        You must borrow or buy this book to leave feedback.
                                    </p>
                                }
                                <!-- Show average rating -->
                                @if (book.AverageRating > 0)
                                {
                                    <div id="average-rating-@book.BookId" class="average-rating mb-3">
                                        <strong>Average Rating:</strong>
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            <span style="color:@(i <= Math.Round(book.AverageRating) ? "gold" : "gray");">&#9733;</span>
                                        }
                                        <small>(@book.RatingCount ratings)</small>
                                    </div>
                                }
                                else
                                {
                                    <div id="average-rating-@book.BookId" class="average-rating mb-3">
                                        <strong>Average Rating:</strong> No ratings yet.
                                    </div>
                                }


                            </div>

                           

                        </div>

                       <!-- Book Image Section -->
                       @if (book.CoverImage != null)
                        {
                            <div class="book-image-container position-relative" id="modalBookContainer-@book.BookId">
                                <img src="data:image/png;base64,@(Convert.ToBase64String(book.CoverImage))"
                                     alt="Book Cover Image" class="img-fluid" />
                                <div class="effect-overlay"></div>
                                <!-- Age Limit Badge -->
                                @{
                                    if (int.TryParse(book.AgeLimit, out ageLimit) && ageLimit > 0)
                                    {
                                        <div class="age-limit-badge position-absolute top-0 end-4 m-2">
                                            @ageLimit+
                                        </div>
                                    }
                                }
                            </div>
                        }

                        <!-- Script for GIF Effects -->
                        <script>
                            document.addEventListener('DOMContentLoaded', () => {
                                const modal = document.getElementById('bookModal-@book.BookId');
                                const effectOverlay = document.querySelector('#modalBookContainer-@book.BookId .effect-overlay');
                                const categoryEffects = {
                                    "Graphic Novels": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/ki-detonate/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/ki-detonate/idle.png"
                                    },
                                    "Business": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-07/d20/intro_success.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-07/d20/idle_success.png"
                                    },
                                    "Biography": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-25/twilight/intro_56dbd2384f.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-25/twilight/loop_ff3e249d19.png"
                                    },
                                    "Sports": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-05/paint-the-town-blue/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-05/paint-the-town-blue/idle.png"
                                    },
                                    "Science Fiction": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-01/spirit-flame/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-07-01/spirit-flame/idle.png"
                                    },
                                    "Technology": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-1-19/cyberpunk-nightrunner/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-1-18/cyberpunk-nightrunner/idle.png"
                                    },
                                    "History": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-05-10/forgotten-treasure/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-05-09/forgotten-treasure/idle.png"
                                    },
                                    "Fantasy": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/splash/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/b17d139f2e9/splash/loop.png"
                                    },
                                    "Cooking": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/sushi-mania/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/sushi-mania/idle.png"
                                    },
                                    "Psychology": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-04/all-nighter/idle-frame.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-04-04/all-nighter/idle-lights.png"
                                    },
                                    "Art": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/sunrise-grove/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/twilight-grove/idle.png"
                                    },
                                    "Children's Books": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-13/plushie-party/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-13/plushie-party/idle.png"
                                    },
                                    "Mystery": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-25/spirit-of-the-kitsune/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-10-25/spirit-of-the-kitsune/idle.png"
                                    },
                                    "Romance": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/dreamy/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-02-28/dreamy/idle.png"
                                    },
                                    "Science": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-14/arcane-epiphany/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-11-14/arcane-epiphany/idle.png"
                                    },
                                    "Adventure": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2023-10-11/vines/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2023-10-11/vines/loop.png"
                                    },
                                    "Horror": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-09-23/midnight-zombie-slime/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-09-23/midnight-zombie-slime/idle.png"
                                    },
                                    "Default": {
                                        intro: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-08-08/sakura-katana/intro.png",
                                        idle: "https://cdn.discordapp.com/assets/profile_effects/effects/2024-08-08/sakura-katana/idle.png"
                                    }
                                };

                                function decodeHtml(html) {
                                    const txt = document.createElement('textarea');
                                    txt.innerHTML = html;
                                    return txt.value;
                                }

                                const category = decodeHtml("@book.Category".trim());
                                const effects = categoryEffects[category] || categoryEffects["Default"];

                                if (modal && effectOverlay) {
                                    modal.addEventListener('shown.bs.modal', () => {
                                        effectOverlay.style.backgroundImage = 'none';

                                        const introGif = `${effects.intro}?${new Date().getTime()}`;
                                        const idleGif = effects.idle;

                                        setTimeout(() => {
                                            effectOverlay.style.backgroundImage = `url("${introGif}")`;
                                            effectOverlay.style.backgroundSize = 'cover';

                                            setTimeout(() => {
                                                effectOverlay.style.backgroundImage = `url("${idleGif}")`;
                                            }, 3150);
                                        }, 150);
                                    });

                                    modal.addEventListener('hidden.bs.modal', () => {
                                        effectOverlay.style.backgroundImage = 'none';
                                    });
                                }
                            });
                        </script>

                    </div>
                </div>
            </div>
        </div>

    }
</div>
<script src="~/js/site.js"></script>